#!/bin/sh

usage() {
    local script=${0##*/}
    echo "
$script [-r] [dsm[,mote]] [files]
    -r (remote): connect to eol-rt-data.guest.ucar.edu:30009
    dsm: dsm number. Can be -1 for all dsms
    mote: mote id, in decimal
If an mote is not specified, or is 0, then an ASCII/HEX dump of all mote data (sensor id 0x8000)
from the dsm is done, so that one can determine the IDs of the reporting motes.
If the mote is specified then data from the mote is processed and displayed in floating point.

Examples:

Dump data from mote 7 from any dsm:
    $script -1,7

Dump records in ASCII/HEX from all motes on dsm 5 from a file. The ids of reporting motes
can then be read from the IDXX: fields in the output
    $script 5 isfs_20110113_160000.dat.bz2

Dump data converted to floating point, from dsm 5, mote 11, from a file:
    $script 5,11 isfs_20110113_160000.dat.bz2
"
}

# set -x
dsm=-1
mote=0x8000

while [ $# -gt 0 ]; do
    case $1 in
        -r)
            remote=sock:eol-rt-data.guest.ucar.edu:30009
            shift
            ;;
        -h)
            usage
            exit 1
            ;;
        -i) # ignore
            shift
            ;;
        [-0-9]*)
            if echo $1 | grep -q ,; then
                dsm=`echo $1 | cut -d , -f 1`
                mote=`echo $1 | cut -d , -f 2`
            else
                dsm=$1
            fi
            shift
            ;;
        *)
            input="$input $1"
            shift
            ;;
    esac
done

if [ "$mote" != 0x8000 -a "$mote" != 0 ]; then
    id1=$(( 32768 + $mote * 256 ))
    id2=$(( $id1 + 255 ))
    # data_dump accepts ids in decimal or 0x hex format.
    # Use printf to convert to hex, so that when the data_dump
    # command is echoed, the resulting ids make a bit more sense
    # (to a geek).
    id1=`printf %#x $id1`
    id2=`printf %#x $id2`
    mote=$id1-$id2
    echo data_dump -i $dsm,$mote -i $dsm,0x8001-0x80ff -p -X $remote $input
    data_dump -i $dsm,$mote -i $dsm,0x8001-0x80ff -p -X $remote $input
else
    echo data_dump -i $dsm,0x8000 -A -X $remote $input
    data_dump -i $dsm,0x8000 -A -X $remote $input
fi

