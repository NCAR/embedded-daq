#!/bin/bash

# shortcut script for controlling digital I/O lines on Titan
# via its I2C device at I2C address 0x20.

usage ()
{
    local script=${0##*/}
    echo "$script [-i] [-a] [-d] n val"
    echo "-a: n is actual Pn port, see below"
    echo "-j: n is J3 pin number, 3-10, 13-15"
    echo "-d: debug, print out register I/O"
    echo "-i: turn port into an input"
    echo "n: Pn if -a option, J3pin if -j, otherwise the remapped port number"
    echo "val=0: turn digital I/O line off"
    echo "val=1: turn digital I/O line on"
    echo "If val not specified, report current setting"
    echo "Example:   $script 6 1"
    echo ""
    echo "Titan digital I/O ports are currently wired to control these FETs.
Pn is the signal name shown on the J3-GPIO diagram in the Titan manual.
Note that the Pn values are offset from the J3 pin numbers.

This is the port mapping if the -a (actual) option is specified:
Pn    FET      J3pin
0     ttyS4    3 (Pn + 3)
1     ttyS3    4
2     ttyS2    5
3     ttyS1    6
4     ETH      7
5              8
6     ttyS0    9
7              10
8              13 (Pn + 5)
9              14
10             15
11    aux      16
12             17
13    +5V      18
14             19
15    DC-DC    20"

    echo ""
    echo "If the -a option is NOT used, the port numbers are remapped
to match the FETs for serial ports 0-4:
#     FET       J3pin
0     ttyS0     9
1     ttyS1     6
2     ttyS2     5
3     ttyS3     4
4     ttyS4     3
5     ETH       7
6     aux       16
7               10
8     +5V       18
9     DC-DC     20"
    echo "Pin 1 on J3 is nearest to the SD and to the outside edge of the card"
    exit 1
}


[ $# -lt 1 ] && usage

setinput=false
actual=false
debug=false
j3pin=false
args=

while [ $# -gt 0 ]; do
    case $1 in
    -i)
        setinput=true
        args+="$1 "
        shift
        ;;
    -j)
        j3pin=true
        args+="$1 "
        shift
        ;;
    -a)
        actual=true
        shift
        ;;
    -d)
        debug=true
        args+="$1 "
        shift
        ;;
    *)
        break
        ;;
    esac
done

[ $# -lt 1 ] && usage

case $1 in
[0-9]*)
    port=$1
    shift
    ;;
*)
    usage
    ;;
esac


if [ $# -ge 1 ]; then
    case $1 in
    0|1)
        val=$1
        shift
        ;;
    *)
        usage
        ;;
    esac
fi

if ! $actual && ! $j3pin; then
    remap=(6 3 2 1 0 4 11 7 13 15)
    if [ $port -ge ${#remap[*]} ]; then
        echo "Only ports 0-$((${#remap[*]}-1)) are remapped. Use -a or -j option"
        usage
    fi
    port=${remap[$port]}
fi

titan_dio $args $port $val

