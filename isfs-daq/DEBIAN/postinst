#!/bin/bash
# postinst script for isfs-daq
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure|triggered)
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

# Is this a Raspberry Pi?
rpi=false
grep "^Hardware" /proc/cpuinfo | grep -Fq BCM && rpi=true

if [ "$1" = configure ]; then

    update-rc.d -f pcmcom8 remove
    $rpi || update-rc.d emerald defaults
    update-rc.d dsm defaults

    df=/etc/modules-load.d
    [ -d $df ] || mkdir $df

    # On VIPERs, enable viper_dio kernel module in /etc/modules-load.d/isfs.conf
    if grep -qF VIPER /proc/cpuinfo; then
        cf=/etc/modules-load.d/isfs.conf
        if ! grep -qF viper_dio $cf 2> /dev/null; then
            echo "viper_dio"  >> $cf
        fi
        # Remove from /etc/modules
        cf=/etc/modules
        if grep -qF viper_dio $cf; then
            sed -r -i -e '/viper_dio/d' $cf
        fi
    fi

    # For now, don't enable tee-gps
    # update-rc.d tee-gps defaults >/dev/null || exit $?

    $rpi || update-rc.d gpsclock defaults >/dev/null || exit $?

    # Add mount of /media/usbdisk. If a record exists in fstab,
    # make sure permissions, device and mount options are right
    mntdir=/media/usbdisk
    [ -d $mntdir ] || mkdir -p $mntdir
    [ $(stat --format %a $mntdir) == 777 ] || chmod 0777 $mntdir

    cf=/etc/fstab
    dev=/dev/sda1
    grep -qF VIPER /proc/cpuinfo && dev=/dev/sdb1
    mntopts="defaults,user,noauto,noatime,dirsync,barrier=1,nodelalloc" 
    if ! grep -F -q $mntdir $cf; then
        echo "$dev $mntdir ext4 $mntopts 0 0" >> $cf
    elif ! grep -F $mntdir $cf | grep -F $dev | grep -F ext4 | grep -Fq $mntopts; then
        sed -r -i -e "s:.*$mntdir.*:$dev $mntdir ext4 $mntopts 0 0:" $cf
    fi

    # mount usbdisk and change permissions on mounted directory
    # permissions seem to persist to the next time is is mounted
    if mount $mntdir 2> /dev/null; then
        [ $(stat --format %a $mntdir) == 777 ] || chmod 0777 $mntdir
        umount $mntdir
    fi

    # Fix permissions on /tmp. Should be fixed in install image
    cf=/etc/fstab
    if ! $rpi; then
        if ! grep ^tmpfs $cf | fgrep /tmp | fgrep -q mode=; then
            sed -i -r -e 's-^(tmpfs[[:space:]]+/tmp[[:space:]]+tmpfs[[:space:]]+[^[:space:]]+)-\1,mode=1777-' $cf
        fi
    fi

    # In case file was inadvertently deleted
    cf=/etc/hosts
    if ! [ -f $cf ]; then
        cat << EOD > $cf
127.0.0.1	localhost
::1		localhost ip6-localhost ip6-loopback
ff02::1		ip6-allnodes
ff02::2		ip6-allrouters
EOD
    fi

    # Add hostname to /etc/hosts, initially titan or viper, to avoid sudo errors
    hn=$(hostname)
    if ! grep -q "^[^#].*$hn" $cf; then
        sed -i -r -e "s/^(127\.0\.0\.1.*)/\1 $hn/" $cf
    fi

    # crude hack: if isfs.conf in /etc/rsyslog.d is new, restart rsyslog
    if [ $(find /etc/rsyslog.d -name isfs.conf -ctime -1 | wc -w ) -gt 0 ]; then
        /etc/init.d/rsyslog restart
    fi
    # create crontab for root
    if ! crontab -l > /dev/null; then
        cat << EOD | crontab
PATH=/usr/sbin:/usr/bin:/sbin:/bin
# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command
EOD
    fi

    # temporary, during project setup
    if ! crontab -l | fgrep -q eol-apt-get; then
        tmpfile=$(mktemp)
        crontab -l > $tmpfile
        echo "0 */4 * * * { eol-apt-get update && eol-apt-get -y upgrade; } 2>&1 | logger -p syslog.info" >> $tmpfile
        crontab $tmpfile
        rm -f $tmpfile
    fi
    # Add PATH
    if ! crontab -l | grep -F PATH | grep -F -q sbin; then
        tmpfile=$(mktemp)
        echo "PATH=/usr/sbin:/usr/bin:/sbin:/bin" > $tmpfile
        crontab -l >> $tmpfile
        crontab $tmpfile
        rm -f $tmpfile
    fi

fi

cf=/etc/default/nidas-daq
if [ "$1" = configure -o "$1" = triggered ]; then

    # desired values for DAQ_* in config file
    user=daq
    group=eol
    gid=1342
    start_dsm=/home/$user/isfs/bin/start_dsm
    daq_path=/home/$user/isfs/bin:/opt/nidas/bin
    if ! [ -f $cf ]; then
        echo "/etc/default/nidas-daq does not exist, is nidas-daq installed?"
        exit 1
    fi
    . $cf
    # if DAQ_GROUP is not $group (or is unset)
    if [ "$DAQ_GROUP" != $group ]; then
        if fgrep -q DAQ_GROUP= $cf; then
            sed -r -i -e "s/^.*DAQ_GROUP=.*/DAQ_GROUP=$group/g" $cf
        else
            echo "DAQ_GROUP=$group" >> $cf
        fi
    fi
    if [ "$DAQ_GID" != $gid ]; then
        if fgrep -q DAQ_GID= $cf; then
            sed -r -i -e "s/^.*DAQ_GID=.*/DAQ_GID=$gid/g" $cf
        else
            echo "DAQ_GID=$gid" >> $cf
        fi
    fi
    if [ "$DAQ_USER" != $user ]; then
        if fgrep -q DAQ_USER= $cf; then
            sed -r -i -e "s/^.*DAQ_USER=.*/DAQ_USER=$user/g" $cf
        else
            echo "DAQ_USER=$user" >> $cf
        fi
    fi
    if [ -n "$DAQ_UID" ]; then
        sed -i -r -e "s/^ *DAQ_UID=/# DAQ_UID=/g" $cf
    fi
    if [ "$START_DSM" != $start_dsm ]; then
        if fgrep -q START_DSM= $cf; then
            sed -r -i -e "s,^.*START_DSM=.*,START_DSM=$start_dsm,g" $cf
        else
            echo "START_DSM=$start_dsm" >> $cf
        fi
    fi
    if [ "$DAQ_PATH" != $daq_path ]; then
        if fgrep -q DAQ_PATH= $cf; then
            sed -r -i -e "s,^.*DAQ_PATH=.*,DAQ_PATH=$daq_path,g" $cf
        else
            echo "DAQ_PATH=$daq_path" >> $cf
        fi
    fi

    . $cf
    # check if DAQ_USER, DAQ_GROUP exists
    if [ ! $DAQ_USER ]; then
        echo "DAQ_USER not found in $cf"
        exit 1
    fi
    if [ ! $DAQ_GROUP ]; then
        echo "DAQ_GROUP not found in $cf"
        exit 1
    fi
    if ! grep -q "^${DAQ_GROUP}:" /etc/group; then
        gidarg=
        [ $DAQ_GID ] && gidarg="--gid $DAQ_GID"
        addgroup $gidarg $DAQ_GROUP
    fi
    # check if DAQ_USER exists
    if ! id $DAQ_USER > /dev/null 2>&1; then
        # should create /home/daq
        uidarg=
        [ $DAQ_UID ] && uidarg="--uid $DAQ_UID"

        # Package has already installed some stuff to /home/daq
        # Save it, then restore. rsync also copies hidden files
        # Perhaps should just copy files owned by root, since those
        # came from the package install
        tmpdir=$(mktemp -d /tmp/${0##*/}_XXXXXX)
        trap "{ rm -rf $tmpdir; }" EXIT
        if [ -d /home/$DAQ_USER ]; then
            rsync -a /home/$DAQ_USER/ $tmpdir
            rm -rf /home/$DAQ_USER
        fi
        adduser $uidarg --ingroup $DAQ_GROUP --gecos "ISFS data acq account,,," --disabled-login $DAQ_USER
        # add to sudo group
        adduser $DAQ_USER sudo
        rsync -a $tmpdir/ /home/$DAQ_USER
        chown -R $DAQ_USER /home/$DAQ_USER
        chgrp -R $DAQ_GROUP /home/$DAQ_USER
        echo "$DAQ_USER user added, but root must do \"passwd $DAQ_USER\" for it to be activated"
    fi

    # Update perms on .ssh and authorized_keys
    cf=/home/$DAQ_USER/.ssh
    [ $(stat --format %U $cf) == "$DAQ_USER" ] || chown $DAQ_USER $cf
    [ $(stat --format %a $cf) == 700 ] || chmod 700 $cf

    cf=/home/$DAQ_USER/.ssh/authorized_keys
    [ $(stat --format %U $cf) == "$DAQ_USER" ] || chown $DAQ_USER $cf
    [ $(stat --format %a $cf) == 600 ] || chmod 600 $cf

    # Update DAQ_USER's .profile
    cf=/home/$DAQ_USER/.profile
    if ! grep -F -q "export ISFS" $cf; then
        cat << \EOD >> $cf
    export ISFS=$HOME/$DAQ_USER/isfs
EOD
    fi

    if ! grep -F -q "isfs.profile" $cf; then
        cat << \EOD >> $cf
    [ -f $ISFS/bin/isfs.profile ] && source $ISFS/bin/isfs.profile
EOD
    fi

    # Set owner, perms of /var/log/isfs
    dir=/var/log/isfs
    [ -d $dir ] || mkdir -p $dir
    [ $(stat --format %a $dir) == 777 ] || chmod 0777 $dir
    [ $(stat --format %U $dir) == "$DAQ_USER" ] || chown -R $DAQ_USER $dir
    [ $(stat --format %G $dir) == "$DAQ_GROUP" ] || chgrp -R $DAQ_GROUP $dir

    cf=$dir/dsm.log
    [ -f $dir ] || touch $cf
    [ $(stat --format %U $cf) == "$DAQ_USER" ] || chown $DAQ_USER $cf
    [ $(stat --format %G $cf) == "$DAQ_GROUP" ] || chgrp $DAQ_GROUP $cf
    [ $(stat --format %a $cf) == 664 ] || chmod 0664 $cf

    # change ownership of /media/usbdisk/projects
    mntdir=/media/usbdisk
    if mount $mntdir 2> /dev/null; then
        if [ -d $mntdir/projects ]; then
            [ $(stat --format %U $mntdir/projects) == "$DAQ_USER" ] || chown -R $DAQ_USER $mntdir/projects
            [ $(stat --format %G $mntdir/projects) == "$DAQ_GROUP" ] || chgrp -R $DAQ_GROUP $mntdir/projects
        fi
        umount $mntdir
    fi

    # setup rsync
    cf=/etc/default/rsync
    sed -i -r -e 's/^RSYNC_ENABLE=false/RSYNC_ENABLE=true/' $cf
    sed -i -r -e "s/^RSYNC_NICE=''/RSYNC_NICE=10/" $cf
    sed -i -r -e "s/^#[[:space:]]*RSYNC_IONICE=.*/RSYNC_IONICE='-c3'/" $cf

    # set user running rsyncd
    cf=/etc/rsyncd.conf
    sed -i -r -e "s/^([[:space:]]*uid[[:space:]]*=[[:space:]]*)root/\1$DAQ_USER/" $cf
    sed -i -r -e "s/^([[:space:]]*gid[[:space:]]*=[[:space:]]*)root/\1$DAQ_GROUP/" $cf

    # this package has a trigger on /etc/chrony/chrony.conf
    cf=/etc/chrony/chrony.conf

    # grab md5sum to see if we change the file
    tmpfile=$(mktemp)
    trap "{ rm -f $tmpfile; }" EXIT
    md5sum $cf > $tmpfile

    # comment all debian.pool servers
    sed -r -i -e 's/^(server.*debian\.pool\.*)/# \1/g' $cf
    # eventually will want to comment tardis.ntp.ucar.edu 
    # along with initstepslew 
    sed -r -i -e 's/^(initstepslew.*)[0-9]\.debian\.pool\.ntp\.org (.*)/\1 \2/' $cf

    # Until we have a chrony with PPS support, tee-gps init
    # script is disabled, gpsd reads from /dev/ttyS3

    # disable PPS feed on /dev/pps0
    sed -r -i -e 's,^(refclock PPS /dev/pps0.*),# \1,' $cf

    # remove old refclock SHM 0 
    if grep -q "^refclock SHM 0" $cf && \
        ! grep -q "^refclock SHM 0 refid NMEA" $cf; then
        sed -r -i -e '/.*refclock SHM 0/d' $cf
    fi

    # remove old refclock SHM 1 
    sed -r -i -e '/.*refclock SHM +1/d' $cf

    # enable NMEA feed from gpsd in shared memory: "refclock SHM 0 refid NMEA" 
    if ! grep -q "^refclock SHM 0 refid NMEA" $cf; then
        sed -r -i -e 's/^#[[:space:]]*(refclock SHM 0 refid NMEA*)/\1/' $cf
    fi
    if ! grep -q "^refclock SHM 0 refid NMEA" $cf; then
        echo "refclock SHM 0 refid NMEA offset 0.5 delay 0.2 noselect" >> $cf
    fi

    if ! $rpi; then
        # enable PPS feed from gpsd on socket
        if ! grep -q "^refclock SOCK /var/run/chrony.ttyS3.sock refid PPS" $cf; then
            # uncomment
            sed -r -i -e 's,^#[[:space:]]*(refclock SOCK /var/run/chrony.ttyS3.sock.*),\1,' $cf
        fi
        if ! grep -q "^refclock SOCK /var/run/chrony.ttyS3.sock refid PPS" $cf; then 
            echo "refclock SOCK /var/run/chrony.ttyS3.sock refid PPS" >> $cf
        fi
    fi

    # if chrony is restarted, should also restart gpsd
    chronyrestarted=false
    if ! md5sum -c --status $tmpfile; then
        /etc/init.d/chrony restart
        chronyrestarted=true
    fi

    cf=/etc/default/gpsd
    md5sum $cf > $tmpfile
    if ! grep -q '^DEVICES=".*/dev/ttyS3' $cf; then
        sed -r -i -e 's,^(#[[:space:]]*)?DEVICES=.*,DEVICES="/dev/ttyS3",' $cf
    fi
    if $chronyrestarted || ! md5sum -c --status $tmpfile; then
        /etc/init.d/gpsd restart
    fi
fi

exit 0
