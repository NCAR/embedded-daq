#!/bin/sh
### BEGIN INIT INFO
# Provides:          tee-gps
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Should-Start:      $syslog $gpsclock $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Start-Before:    gpsd   # effectively adds Should-Start: tee-gps to gpsd
# Short-Description: Tee the serial feed from a gps to one or more ptys
# Description:        Tee the serial feed from a gps to one or more ptys
#   Uses /opt/nidas/bin/tee_tty to read the GPS.
### END INIT INFO

# Author: Gordon Maclean <maclean@ucar.edu>

# Do NOT "set -e"

NIDAS_PATH=/opt/nidas/bin

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/opt/nidas/bin
DESC="tee-gps"
NAME=tee-gps
DNAME=tee_tty
DAEMON=$NIDAS_PATH/$DNAME
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
# Read DEVICES from gpsd
[ -r /etc/default/gpsd ] && . /etc/default/gpsd

# No GPS_DEVICE defined
[ $GPS_DEVICE ] || exit 0
[ $DEVICES ] || exit 0

# grab first one
echo $DEVICES | awk '{print $1}'

DAEMON_ARGS="$GPS_DEVICE $GPS_TEE_OPTS $DEVICES -w $GPS_TEE_DEVICE"
# echo "DAEMON_ARGS=$DAEMON_ARGS"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        start-stop-daemon --start --quiet --exec $DAEMON --test > /dev/null \
                            || return 1
        start-stop-daemon --start --quiet --exec $DAEMON -- \
                            $DAEMON_ARGS \
                            || return 2
}

do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --name $DNAME
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2
        return "$RETVAL"
}


case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$DNAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$DNAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
	;;
  status)
        status_of_proc "$DAEMON" "$DNAME" && exit 0 || exit $?
	;;
  restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;

  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
