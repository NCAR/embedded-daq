#
# Syntax
#   ttydev options
#   ttydev: /dev/ttySx
#   options: any of the following
#       485/422/232 (default 232)
#       term, noterm (default noterm)
#       slew= norm,slow (default norm)
#       tx=auto, rts    (default rts)
# Example:
# /dev/ttyS2 485 slew=slow noterm tx=auto
#
# The key to half duplex 485 I/O is to only enable the TX hardware
# when actually transmitting, so as not to affect the RX level, since
# they share the same wire.  This is generally implemented by providing
# a hardware enable between RTS on the UART and the TX hardware.
# Note that RTS in this case is not "put on the wire",
# it's just a local control of the TX hardware.
#
# Then the question is, who controls the RTS?  Some ports support
# an automatic control: which automatically toggles RTS when
# data is in the transmit buffer.
# Use tx=auto to enable that mode if it is supported.
#
# If RTS does enable TX, but auto control of RTS is not supported,
# then RTS must be controlled by software. Software control is not
# optimal since the software doesn't know to a high precision when
# all characters have actually been transmitted, but generally works
# for low bandwidth connections. Use tx=rts to select software control
# of RTS.
#
# Note that Nidas has an option to provide software control of RTS/TX on a port:
# <serialSensor rts485="1" ...>. Or set rts485="-1" if the RTS control of TX is
# inverted.  For modbus 485 sensors, this software control of RTS does not
# work in libmodbus, and so those sensors must be on a port that supports
# tx=auto.
# 
