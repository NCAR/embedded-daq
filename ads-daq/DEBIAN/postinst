#!/bin/bash
# postinst script for ads-daq
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

vortex=false
grep "^vendor_id" /proc/cpuinfo | grep -Fq Vortex86 && vortex=true

vulcan=false
grep Hardware /proc/cpuinfo | grep -Fq VULCAN && vulcan=true

case "$1" in
    configure|triggered )
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

if [ "$1" = configure ]; then

    # Turn off firewall if ufw command is found
    if which ufw > /dev/null; then
        ufw status | grep -Fq inactive || ufw disable
    fi

    # Add gpio group if it doesn't exist
    grep -q "^gpio:" /etc/group || addgroup --system gpio

    update-rc.d gpsd disable S 2 3 4 5 >& /dev/null || :
    # update-rc.d -f gpsd remove

    update-rc.d bluetooth disable S 2 3 4 5 >& /dev/null || :
    # update-rc.d -f bluetooth remove

    # dsm init script no longer used or installed
    # update-rc.d dsm defaults

    update-rc.d emerald disable S 2 3 4 5 >& /dev/null || :
    # update-rc.d -f emerald remove

    # Disable bluetooth
    cf=/etc/default/bluetooth
    if [ -f $cf ]; then
        . $cf
        if [ $BLUETOOTH_ENABLED ]; then
            if [ $BLUETOOTH_ENABLED -gt 0 ]; then
                echo "Disabling bluetooth in $cf"
                sed -i -r -e 's/BLUETOOTH_ENABLED=.*/BLUETOOTH_ENABLED=0/' $cf
            fi
        fi
    fi

    # add a couple critical hosts.
    cf=/etc/hosts
    if ! grep -q "acserver" $cf; then
	echo "192.168.84.2	acserver" >> $cf
    fi
    if ! grep -q "timeserver" $cf; then
	echo "192.168.84.10	timeserver" >> $cf
    fi

    # crude hack: if ads.conf in /etc/rsyslog.d is new, restart rsyslog, but
    # only if rsyslog is running.  this also avoids trying to restart rsyslog
    # on a container when systemd is not running.
    if [ $(find /etc/rsyslog.d -name ads.conf -ctime -1 | wc -w ) -gt 0 ]; then
        if systemctl is-active --quiet rsyslog > /dev/null 2>&1; then
            systemctl restart rsyslog
        fi
    fi
    # create crontab for root
    if ! crontab -l > /dev/null; then
        cat << EOD | crontab
PATH=/usr/sbin:/usr/bin:/sbin:/bin
# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command
EOD
    fi

    # register /etc/modules-load.d/ads.conf for ucf config command
    ucfr ads-daq /etc/modules-load.d/ads.conf
    if command -v update_modules_conf > /dev/null; then
        # Update /etc/modules-load.d/ads.conf from
        # appropriate file for this DSM in /etc/ads-modules.d
        update_modules_conf
    fi

    cf=/etc/motd
    [ -f $cf ] || touch $cf
    if ! grep -qF "man ads" $cf; then
        echo "Do:  \"man ads\" or \"man dsm\" for help" >> $cf
    fi

    # We want to get the libxerces-c3.2 package from EOL, it is
    # built with --disable-sse2 which is needed on the vortex
    if $vortex; then
        cf=/etc/apt/preferences.d/libxerces-c
        if ! [ -f $cf ]; then
            cat << EOD > $cf
Explanation: Make sure we get libxerces-c3.2 from the EOL repository
Package: libxerces-c3.2
Pin: release l=EOL
Pin-Priority: 1001
EOD
        fi
    fi

fi

# cf=/etc/default/nidas-daq

if [ "$1" = configure -o "$1" = triggered ]; then

    hassystemctl=false
    which systemctl > /dev/null && hassystemctl=true

    if [ -e /etc/init.d/pcmcom8 ]; then
        update-rc.d pcmcom8 defaults
    fi

    # desired values for DAQ_* in config file
    DAQ_USER=ads
    DAQ_GROUP=eol
    DAQ_GID=1342
    start_dsm=/home/$DAQ_USER/bin/start_dsm
    daq_path=/home/$DAQ_GROUP/bin:/opt/nidas/bin

    # set default value. It can be over-ridden in nidas-daq
    DISABLE_CRONS=true

    if ! grep -q "^${DAQ_GROUP}:" /etc/group; then
        gidarg=
        [ $DAQ_GID ] && gidarg="--gid $DAQ_GID"
        addgroup $gidarg $DAQ_GROUP
    fi
    # check if DAQ_USER exists
    if ! id $DAQ_USER > /dev/null 2>&1; then
        # should create /home/ads
        uidarg=
        [ $DAQ_UID ] && uidarg="--uid $DAQ_UID"

        # Package has already installed some stuff to /home/$DAQ_USER
        # Save it, then restore. rsync also copies hidden files
        # Perhaps should just copy files owned by root, since those
        # came from the package install
        tmpdir=$(mktemp -d /tmp/${0##*/}_XXXXXX)
        trap "{ rm -rf $tmpdir; }" EXIT
        if [ -d /home/$DAQ_USER ]; then
            rsync -a /home/$DAQ_USER/ $tmpdir
            rm -rf /home/$DAQ_USER
        fi
        adduser $uidarg --ingroup $DAQ_GROUP --gecos "ADS data acq account,,," --disabled-login $DAQ_USER
        # add to sudo, i2c, gpio, dialout groups
        adduser $DAQ_USER sudo
        adduser $DAQ_USER i2c
        adduser $DAQ_USER gpio
        adduser $DAQ_USER dialout 
        rsync -a $tmpdir/ /home/$DAQ_USER
        echo "$DAQ_USER user added, but root must do \"passwd $DAQ_USER\" for it to be activated"
    fi

    # newly installed files will be owned by root, change to $DAQ_USER
    find /home/$DAQ_USER \! -xtype l \! -user $DAQ_USER -execdir chown $DAQ_USER {} +
    find /home/$DAQ_USER \! -xtype l \! -group $DAQ_GROUP -execdir chgrp $DAQ_GROUP {} +

    # Early installs didn't have DAQ_USER in gpio group
    grep "^gpio:" /etc/group | grep -qF $DAQ_USER || adduser $DAQ_USER gpio
    # For older images the dialout group did not exist (was uucp)
    grep "^dialout:" /etc/group | grep -qF $DAQ_USER || adduser $DAQ_USER dialout

    # Update perms on .ssh and authorized_keys
    cf=/home/$DAQ_USER/.ssh
    [ $(stat --format %a $cf) == 700 ] || chmod 700 $cf

    cf=/home/$DAQ_USER/.ssh/authorized_keys
    [ $(stat --format %a $cf) == 600 ] || chmod 600 $cf

    # Update DAQ_USER's .profile
    cf=/home/$DAQ_USER/.profile
    if ! grep -F -q "export ADS" $cf; then
        cat << \EOD >> $cf
    export ADS=$HOME
EOD
    fi
    # Fix def of $ADS, should be simply $HOME, not $HOME/ads
    sed -i -r -e 's,export ADS=\$HOME/ads,export ADS=$HOME,' $cf

    if ! grep -F -q "ads.profile" $cf; then
        cat << \EOD >> $cf
    [ -f $ADS/bin/ads.profile ] && source $ADS/bin/ads.profile
EOD
    fi

    # Set owner, perms of /var/log/ads. On systemd systems (e.g. vortex),
    # rsyslog is run from user syslog, and will have permission problems
    # if log file is owned by ads
    dir=/var/log/ads
    [ -d $dir ] || mkdir -p $dir
    syslogger=$DAQ_USER
    grep -F -q syslog /etc/passwd && syslogger=syslog
    [ $(stat --format %a $dir) == 777 ] || chmod 0777 $dir
    [ $(stat --format %U $dir) == "$syslogger" ] || chown -R $syslogger $dir
    [ $(stat --format %G $dir) == "$DAQ_GROUP" ] || chgrp -R $DAQ_GROUP $dir

    cf=$dir/dsm.log
    [ -f $dir ] || touch $cf
    [ $(stat --format %U $cf) == "$syslogger" ] || chown $syslogger $cf*
    [ $(stat --format %G $cf) == "$DAQ_GROUP" ] || chgrp $DAQ_GROUP $cf*
    [ $(stat --format %a $cf) == 664 ] || chmod 0664 $cf

    # Change syslog to 16 days, messages to 16 weeks of logs
    sed -i -r -e "s/rotate ./rotate 16/" /etc/logrotate.d/rsyslog


    # setup rsync
    cf=/etc/default/rsync
    sed -i -r -e 's/^RSYNC_ENABLE=false/RSYNC_ENABLE=true/' $cf
    sed -i -r -e "s/^RSYNC_NICE=''/RSYNC_NICE=10/" $cf
    sed -i -r -e "s/^#[[:space:]]*RSYNC_IONICE=.*/RSYNC_IONICE='-c3'/" $cf

    # set user running rsyncd
    cf=/etc/rsyncd.conf
    sed -i -r -e "s/^([[:space:]]*uid[[:space:]]*=[[:space:]]*)root/\1$DAQ_USER/" $cf
    sed -i -r -e "s/^([[:space:]]*gid[[:space:]]*=[[:space:]]*)root/\1$DAQ_GROUP/" $cf

    # set timezone to UTC
    if $vortex; then
        timedatectl set-timezone UTC
    fi

    # this package has a trigger on /etc/chrony/chrony.conf
    cf=/etc/chrony/chrony.conf
    $vulcan && cf=/etc/chrony.conf

    # grab md5sum to see if we change chrony.conf
    tmpfile=$(mktemp)
    trap "{ rm -f $tmpfile; }" EXIT
    md5sum $cf > $tmpfile

    svrargs="prefer iburst minpoll 4 maxpoll 4 polltarget 16"

    # first comment all servers and pools
    sed -r -i -e 's/^[[:space:]]*(server[[:space:]]+.*)/# \1/' $cf
    sed -r -i -e 's/^[[:space:]]*(pool[[:space:]]+.*)/# \1/' $cf
    # then uncomment timeserver and acserver
    # use acserver as a fallback server in case timeserver is not yet up
    # acserver's clock should be pretty close, better than nothing
    sed -r -i -e "s/#[[:space:]]*server[[:space:]]+timeserver.*/server timeserver $svrargs/" $cf
    sed -r -i -e "s/#[[:space:]]*server[[:space:]]+acserver/server acserver/" $cf

    # add timeserver and acserver if they don't exist
    # crazy sed syntax:  "0,/xxx/{/xxx/a yyy }" will append yyy only once after the first xxx line
    grep -Eq '^server timeserver' $cf || sed -r -i -e "0,/^# server/{/^# server/a server timeserver $svrargs
        }" $cf
    grep -Eq '^server timeserver' $cf || sed -r -i -e "0,/^# pool/{/^# pool/a server timeserver $svrargs
        }" $cf
    grep -Eq '^server timeserver' $cf || echo "server timeserver $svrargs" >> $cf
    grep -Eq '^server acserver' $cf || sed -r -i -e "0,/^server timeserver/{/server timeserver/a server acserver
        }" $cf

    # set maxpoll to 4
    sed -r -i -e "s/^(server timeserver.+maxpoll)( [0-9]+)(.*)/\1 4\3/" $cf

    # Modify initstepslew line, add if necessary
    sed -r -i -e 's/^[[:space:]]*initstepslew.*$/initstepslew 1 timeserver/' $cf
    grep -Eq '^initstepslew' $cf || sed -r -i -e "/server timeserver/a initstepslew 1 timeserver" $cf

    # uncomment log line, make sure log tracking is turned on
    sed -r -i -e 's/^[[:space:]]*#[[:space:]]*log[[:space:]]+(.*)$/log \1/' $cf
    grep -Eq '^log.*tracking' $cf || sed -r -i -e 's/^(log.*)/\1 tracking/' $cf
    grep -Eq '^log.*tracking' $cf || echo "log tracking" >> $cf

    # fix logdir if needed - needed on vulcans
    sed -r -i -e 's,^[[:space:]]*#[[:space:]]*logdir[[:space:]]+(.*)$,logdir /var/log/chrony,' $cf
    [ -d /var/log/chrony ] || mkdir /var/log/chrony

    cf=/etc/default/gpsd
    sed -r -i -e 's/^START_DAEMON=.*true.*/START_DAEMON="false"/' $cf
    sed -r -i -e 's/^USBAUTO=.*true.*/USBAUTO="false"/' $cf

    if ! md5sum -c --status $tmpfile && \
        systemctl is-active --quiet chrony > /dev/null 2>&1; then
        systemctl restart chrony
    fi

    cf=/etc/crontab
    # Move /etc/crontab.disable back to /etc/crontab (undo old package change)
    [ -f $cf.disable ] && mv $cf.disable $cf

    # If DISABLE_CRONS is true, edit /etc/crontab, disabling all hourly, daily, weekly
    # and monthly crons, otherwise re-enable them.  Setting DISABLE_CRONS
    # to true (the default) is how one makes logrotates only happen at boot.
    if [ -f $cf ]; then
        if $DISABLE_CRONS; then
            sed -i -r 's/^([0-9].*)/# \1/' $cf
        else
            # if second field (hour) of a line in /etc/crontab is not *,
            # then uncomment it, leaving cron.hourly commented.
            sed -i -r 's/^[[:space:]]*#+[[:space:]]*([0-9]+[[:space:]]+[^*]+.*)/\1/' $cf
        fi
    fi

    # logrotate (at least version 3.8.7) does not like group write access on a config file
    cf=/etc/logrotate.d/ads
    stat -c %a $cf | grep -q -F 644 || chmod 644 $cf

    # Old versions moved /etc/cron.daily/logrotate to disable
    cf=/etc/cron.daily/logrotate
    cdir=/etc/cron.daily/disable
    if [ -f $cdir/logrotate ]; then
        mv $cdir/logrotate $cf
        rmdir --ignore-fail-on-empty $cdir
    fi

    cf=/etc/rc.local
    [ -f $cf ] || touch $cf
    stat -c %A $cf | grep -q -F x || chmod +x $cf
    grep -q -E  "^ *exit" $cf || echo "exit 0" >> $cf
    if ! grep -q -F /etc/cron.hourly $cf; then
        sed -i -r "/^ *exit/ i \
# run cron.hourly and cron.daily at bootup\\
# they have been removed from /etc/crontab\\
run-parts --report /etc/cron.hourly \\
run-parts --report /etc/cron.daily" $cf
    fi
    # remove logrotate from /etc/rc.local, it's in cron.daily
    sed -i "/\/usr\/sbin\/logrotate/d" $cf

    # Reduce size of /var/log/journal 
    journalctl --vacuum-time=120d

    if which insserv > /dev/null; then
	insserv -s | grep -q "^S.*rc.local" || update-rc.d rc.local defaults
    elif ! systemctl is-enabled rc-local.service > /dev/null; then
        systemctl enable rc-local
    fi

    if $vortex ; then
        # wdt.service as shipped on Vortex starts wdt.ko for
        # an ISA watchdog card, not the on-board watchdog.
        # We don't have that card, so don't enable the service.
        # The on-board watchdog is in the wdt-vortex package: wdt_vortex.ko
        if systemctl is-enabled wdt > /dev/null; then
            systemctl disable wdt || :
        fi
        # uio48 is no longer a service.
        cf=/lib/systemd/system/uio48.service
        if [ -e $cf ] && systemctl is-enabled uio48 > /dev/null; then
            systemctl disable uio48 || :
        fi

        if ! systemctl is-enabled rs4xx.service > /dev/null; then
            systemctl enable rs4xx.service
            systemctl start rs4xx.service
        fi
    fi

    # disable some timers
    if $hassystemctl; then
        for timer in anacron.timer apt-daily-upgrade.timer \
            apt-daily.timer motd-news.timer ua-timer.timer; do
            if systemctl is-enabled $timer > /dev/null; then
                echo "disabling $timer"
                systemctl disable $timer
                # no need to stop a timer that is not running
                if systemctl is-active --quiet $timer > /dev/null 2>&1; then
                    systemctl stop $timer
                fi
            fi
        done
    fi

    # Nuke uio48 lines in nidas.conf - they belong in uio48.conf
    cf=/etc/modprobe.d/nidas.conf
    if [ -f $cf ]; then
        sed -i -r -e '/uio48/d' -e '/.*Vortex.*GPIO/d' $cf
    fi
fi

exit 0
