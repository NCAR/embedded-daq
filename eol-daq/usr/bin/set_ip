#!/bin/bash

# Provide script to configure /etc/network/interfaces for a
# given interface, and optionally, the name servers
# in /etc/resolv.conf.
# This is intended for the control of ethernet interfaces.

# Ideally we'd use nmcli, but in Debian 8 that requires
# systemd, which we're not using because it seems to be
# incompatible with mounting /usr and /var late in the boot sequence.

ifcurr=/etc/network/interfaces
dnsfile=/etc/resolv.conf

ifpend=$(mktemp /tmp/set_ip_XXXXXX)
tmpfile=$(mktemp /tmp/set_ip_XXXXXX)
trap "{ rm -f $ifpend  $tmpfile; }" EXIT
# trap "{ rm -f $ifpend  $tmpfile; stty sane erase ^h; }" EXIT

cp $ifcurr $ifpend

interface=eth0
hostname=$(hostname)

hostip=$(awk '/[[:space:]]'$hostname'([[:space:]].*)?$/{print $1}' /etc/hosts)
[ "$hostip" == 127.0.0.1 ] && hostip=

address=
netmask=
broadcast=
gw_comment=' '
nameservers=
dhcp_or_static=unknown

active_addr_bc_nm_gw() {
    # get active values of IP address, broadcast, netmask and gateway
    local iface=$1
    local -a addrs=(unknown unknown unknown)
    local updown=DOWN
    if ifconfig $iface > $tmpfile; then
        grep -q -e '^[[:space:]]*UP ' $tmpfile && updown=UP
        addrs=($(sed -rn -e '/inet addr/s/.*inet addr:([0-9.]+) +Bcast:([0-9.]+) +Mask:([0-9.]+)/\1 \2 \3/p' $tmpfile))

        [ ${#addrs[*]} == 1 -a -z "${addrs[0]}" ] && addrs=(unknown unknown unknown)
    fi

    local gw=$(route -n | awk '/^0.0.0.0/{print $2}')
    [ $gw ] || gw=none

    echo $updown ${addrs[*]} $gw
    return 0
}

display_active() {
    # display currently active settings
    local iface=$1
    local -a addrs=($(active_addr_bc_nm_gw $iface))
    local -a ldns=($(active_dns))
    local onboot=NO
    local dhcp=$(get_dhcp_or_static $ifcurr $iface)

    get_auto $ifcurr $iface && onboot=YES
    
    echo "Current state of $iface:
    Enabled on boot: $onboot
    Status:     ${addrs[0]}
    Config:     $dhcp
    IP address: ${addrs[1]}
    netmask:    ${addrs[3]}
    broadcast:  ${addrs[2]}
    gateway:    ${addrs[4]}
    DNS:        ${ldns[*]}
    hostname:   $hostname $hostip"
}

display_new() {
    local iface=$1
    
    echo "New settings:
    Config:     $dhcp_or_static
    IP address: $address
    broadcast:  $broadcast
    netmask:    $netmask
    gateway:    $gateway
    DNS:        $nameservers"
}

get_dhcp_or_static() {
    # scan the interface line for dhcp or static
    local file=$1
    local iface=$2
    if grep -E "^[^#].*iface[[:space:]]+$iface[[:space:]].*dhcp" $file; then
        echo DHCP
    elif grep -E "^[^#].*iface[[:space:]]+$iface[[:space:]].*static" $file; then
        echo static
    else
        echo unknown
        return 1
    fi
    return 0
}

to_dhcp() {
    # sed script to set interface to dhcp
    local file=$1
    local iface=$2
    sed -r -i -e "
        s/^[#[:space:]]*iface $iface inet dhcp/iface $iface inet dhcp/     # uncomment dhcp
        /^[[:space:]]*iface $iface inet static/,/gateway/{
            s/^(.)/# \1/    # comment block of static entries up to gateway
        }" $file
    local res = $?
    dhcp_or_static=$(is_dhcp $file $iface)
    return $res
}

to_static() {
    # sed script to comment dhcp line and set static values
    local file=$1
    local iface=$2
    sed -r -i -e "
        s/^[[:space:]]*(iface +$iface +inet +dhcp)/# \1/        # comment dhcp
        /^[#[:space:]]*iface $iface inet static/,/gateway/{     # block from iface to gateway
            s/^[#[:space:]]*(iface $iface inet static)/\1/      # uncomment static
            s/^[#[:space:]]*address.*/        address ${address:?}/
            s/^[#[:space:]]*broadcast.*/        broadcast ${broadcast:?}/
            s/^[#[:space:]]*netmask.*/        netmask ${netmask:?}/
            s/^[#[:space:]]*gateway.*/${gw_comment}       gateway ${gateway:?}/
        }" $file
    local res = $?
    dhcp_or_static=$(is_dhcp $file $iface)
    return $?
}

get_auto() {
    # Check if interface is in auto line
    local file=$1
    local iface=$2

    grep "^[[:space:]]*auto" $file | grep -q -F $iface
    return $?
}

add_auto() {
    # Add interface to auto line
    local file=$1
    local iface=$2
    sed -r -i -e "
        s/^[#[:space:]]*auto(.*)/auto\1/     # uncomment auto line
        /^auto/{
            s/[[:space:]]+$iface//       # remove interface
            s/^auto(.*)[[:space:]]lo(.*)/auto\1 lo $iface\2/  # add back after lo
        }" $file

    # no auto line
    if ! grep -q "^[[:space:]]*auto" $file; then
        sed -r -i -e "
            1i \
# interfaces to bring up automatically\
auto lo $iface
            " $file
    fi
}

no_auto() {
    # Remove interface from auto line
    local file=$1
    local iface=$2
    sed -r -i -e "
        s/^[#[:space:]]*auto(.*)/auto\1/     # uncomment
        /^auto/s/[[:space:]]+$iface//       # remove interface
        " $file
}

prompt_address() {
    local iface=$1
    local addr=$2
    local ans

    while true; do
        read -e -i "$addr" -p "Enter IP address of $iface (ctrl-c to quit): " ans
        case "$ans" in
            [0-9]*.[0-9]*)
                break
                ;;
            *)
                echo "huh?"
                ;;
        esac
    done
    echo $ans
}

default_netmask() {
    local addr=$1
    local b1=$(echo $addr | cut -d. -f1)

    if [ $b1 -lt 127 ]; then
         echo 255.0.0.0
    elif [ $b1 -lt 192 ]; then
         echo 255.255.0.0
    else
        echo 255.255.255.0
    fi
}

prompt_netmask() {
    local iface=$1
    local nm=$2
    local ans

    while true; do

        read -e -i "$nm" -p "$iface: enter netmask: " ans
        case "$ans" in
            [0-9]*.[0-9]*)
                break
                ;;
            *)
                echo "huh?"
                ;;
        esac
    done
    echo $ans
}

default_broadcast_gateway() {
    local addr=$1
    local nmask=$2

    # split address and netmask at dots
    local -a ad=($(echo $addr | sed -r 's/\./ /'g))
    local -a nm=($(echo $nmask | sed -r 's/\./ /'g))

    local bc
    local gw
    for (( i = 0; i < ${#nm[*]}; i++ )); do
        [ $gw ] && gw+=.
        [ $bc ] && bc+=.
        if [ ${nm[$i]} == 255 ]; then
            gw=${gw}${ad[$i]}
            bc=${bc}${ad[$i]}
        else
            if [ $i == $((${#nm[*]}-1)) ]; then
                gw+=1
            else
                gw+=${ad[$i]}
            fi
            bc+=255
        fi
    done
    echo $bc $gw
}

prompt_broadcast() {
    local iface=$1
    local bc=$2
    local ans

    while true; do
        read -e -i "$bc" -p "$iface: enter broadcast address: " ans
        case "$ans" in
            [0-9]*.[0-9]*)
                break
                ;;
            *)
                echo "huh?"
                ;;
        esac
    done
    echo $ans
}

prompt_gateway() {
    local iface=$1
    local gw=$2
    local ans
    while true; do
        ans=$gateway
        read -e -i "$gw" -p "$iface: enter address of gateway, 
    n for no gateway, or ctrl-c to quit: " ans
        case $ans in
            *n*)
                gw_comment='#'
                ans=$gw
                break
                ;;
            [0-9]*.[0-9]*)
                break
                ;;
            *)
                echo "huh?"
                ;;
        esac
    done
    echo $ans
}

active_dns() {
    awk '/^[[:space:]]*nameserver/{print $2}' $dnsfile
}

prompt_dns() {
    local ans
    local ldns=($*)
    while true; do
        read -e -i "${ldns[*]}" -p "Enter DNS servers (dot notation separated by spaces), or
    ctrl-c: quit: " ans
        local ok=false
        if [ $ans ]; then
            ok=true
            for ldns in $ans; do
                case $ldns in
                    [0-9]*.[0-9]*.[0-9]*)
                        ;;
                    *)
                        ok=false
                        ;;
                esac
            done
        fi
        $ok && break
        echo "huh?"
    done

    echo $ans
}

save_dns() {
    local ldns=($*)
    cp $dnsfile $tmpfile
    # remove nameserver entries
    sed -ri '/^[[:space:]]*nameserver/d' $tmpfile
    for dns in ${ldns[*]}; do
        echo "nameserver $dns" >> $tmpfile
    done
    cp $tmpfile $dnsfile
}

prompt_static() {
    local iface=$1

    address=$(prompt_address $iface $address)
    netmask=$(default_netmask $address)
    netmask=$(prompt_netmask $iface $netmask)
    vals=($(default_broadcast_gateway $address $netmask))
    broadcast=${vals[0]}
    broadcast=$(prompt_broadcast $iface $broadcast)
    if [ $gatewayip ]; then
        gateway=$gatewayip
    fi
    # echo "broadcast=$broadcast"
    # echo "gateway=$gateway"
    gateway=$(prompt_gateway $iface $gateway)

    nameservers=$(active_dns)

    if [ -z "$nameservers" ]; then
        if [ $dnsip ]; then
            nameservers=$dnsip
        else
            nameservers=$gateway
        fi
    fi

    nameservers=$(prompt_dns $nameservers)
}

double_check() {
    local iface=$1
    local ans
    while true; do
        read -e -p "Enter
    a: show active settings, or
    n: show new settings, or
    s: save new settings to /etc/network/interface and /etc/resolv.conf, or
    u: update $iface from /etc/network/interface (warning: may disconnect you), or
    c: see current /etc/network/interfaces, or
    p: see pending /etc/network/interfaces, or
    o: start over, or
    q or ctrl-c: quit without saving: " ans
        case $ans in
            a)
                display_active
                ;;
            n)
                display_new
                ;;
            s)
                echo "copying $ifpend to $ifcurr"
                cp $ifpend $ifcurr || exit 1
                echo "updating $dnsfile, $nameservers"
                save_dns $nameservers
                ;;
            u)
                echo "doing: ifdown $iface; ifup $iface"
                ifdown $iface
                if ifup $iface; then
                    echo "success"
                else
                    echo "Warning: 'ifup $iface' failed"
                fi
                sleep 2
                # bringing dhcp down may have cleared /etc/resolv.conf
                if [ $(is_dhcp $ifcurr $iface) == static ]; then
                    save_dns $nameservers
                fi
                break
                ;;
            c)
                echo "############# start of current /etc/network/interfaces ####"
                cat $ifcurr
                echo "############# end of current /etc/network/interfaces ####"
                ;;
            p)
                echo "############# start of pending /etc/network/interfaces ####"
                cat $ifpend
                echo "############# end of pending /etc/network/interfaces ####"
                ;;
            o)
                return 1
                ;;
            q)
                exit
                ;;
            *)
                echo "huh?"
                ;;
        esac
    done
    return 0
}

display_active $interface

[ $(id -un) == root ] || echo "Warning, you must be root to change the network configuration. Use sudo ${0##*/}"

# Set the default address to the active address
# If addresses for gateway and dns are in /etc/hosts use them
addrs=($(active_addr_bc_nm_gw $iface))
address=${addrs[1]}
gateway=$(awk '/[[:space:]]gateway([[:space:]].*)?$/{print $1}' /etc/hosts)
[ -z "$gateway" ] && gateway=${addrs[4]}
nameservers=$(awk '/[[:space:]]dns([[:space:]].*)?$/{print $1}' /etc/hosts)
[ -z "$nameservers" ] && nameservers=$(active_dns)

while true; do

    read -e -p "For $interface, enter
    a: show active settings, or
    d: set address via DHCP, or
    s: set static IP address, or
    x: disable $interface on boot, or
    c: see current /etc/network/interfaces, or
    q: quit: " ans

    case $ans in
        a)
            display_active $interface
            ;;
        d)
            add_auto $ifpend $interface
            to_dhcp $ifpend $interface
            double_check $interface || continue
            ;;
        s)
            prompt_static $interface

            add_auto $ifpend $interface
            to_static $ifpend $interface
            double_check $interface || continue

            ;;
        x)
            no_auto $ifpend $interface
            double_check $interface || continue
            ;;
        c)
            echo "############# start of current interfaces file ####"
            cat $ifcurr
            echo "############# end of current interfaces file ####"
            ;;
        q)
            break
            ;;
        *)
            echo "huh?"
            ;;
    esac
done

