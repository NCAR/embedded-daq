#!/bin/bash

# script for controlling digital I/O lines on the
# J3 connector of a Eurotech Titan via the Maxim MAX7313
# I2C device at I2C address 0x20.

if ! grep -Fq "TITAN" /proc/cpuinfo; then
    echo "Error: this command works only on a Eurotech TITAN"
    exit 1
fi

# path to i2c-tools
PATH=$PATH:/usr/sbin

usage ()
{
    echo "${0##*/} [-i] [-j] [-d] n [val]"
    echo "-d: debug, print out I2C commands"
    echo "-i: turn port into an input"
    echo "-j: n is pin number on J3 connector, 3-10, 13-20"
    echo "n: digital port number 0-15, or, if -j option, J3 pin number"
    echo "val=0: turn digital I/O line off"
    echo "val=1: turn digital I/O line on"
    echo "If val not specified, report current setting"
    echo "Example:   ${0##*/} 6 1"
    echo ""
    echo "Pin 1 on J3 is nearest to the SD and to the outside edge of the card"
    exit 1
}

[ $# -lt 1 ] && usage

setinput=false
debug=false
j3pin=false

while [ $# -gt 0 ]; do
    case $1 in
    -a)
        # support -a option for ISFS users
        shift
        ;;
    -i)
        setinput=true
        shift
        ;;
    -j)
        j3pin=true
        shift
        ;;
    -d)
        debug=true
        shift
        ;;
    *)
        break
        ;;
    esac
done

[ $# -lt 1 ] && usage

case $1 in
[0-9]*)
    port=$1
    shift
    ;;
*)
    usage
    ;;
esac

if $j3pin; then
    # $j3map[$i] is the Maxim MAX7313 port number for J3 pin i
    j3map=(-1 -1 -1 0 1 2 3 4 5 6 7 -1 -1 8 9 10 11 12 13 14 15)
    [ $port -lt 0 -o $port -ge ${#j3map[*]} ] && usage
    port=${j3map[$port]}
fi

[ $port -lt 0 -o $port -gt 15 ] && usage

if [ $# -ge 1 ]; then
    case $1 in
    0|1)
        val=$1
        shift
        ;;
    *)
        usage
        ;;
    esac
fi

i2c=0x20

# Fun with bash math syntax!!!!

if [ -z "$val" ]; then
    if [ $port -lt 8 ]; then
        # bits 0-7 of 0x06 are high if ports 0-7 are inputs
        x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x06)
        $debug && echo "reg 0x06 = $x"
        input=$(( (1 << port & x) != 0 ))
        $debug && echo "port $port input = $input"
        if $setinput && [ $input -eq 0 ]; then
            # change the pin to input
            cfg=$(( 1 << port | x ))
            $debug && echo "writing $cfg to reg 0x06"
            i2cset -f -y pxa_i2c-i2c $i2c 0x06 $cfg
            input=1
        fi
    else
        # bits 0-7 of 0x07 are high if ports 8-15 are inputs
        x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x07)
        $debug && echo "reg 0x07 = $x"
        input=$(( (1 << (port - 8) & x) != 0 ))
        $debug && echo "port $port input = $input"
        if $setinput && [ $input -eq 0 ]; then
            # change the pin to input
            cfg=$(( 1 << (port-8) | x ))
            $debug && echo "writing $cfg to reg 0x07"
            i2cset -f -y pxa_i2c-i2c $i2c 0x07 $cfg
            input=1
        fi
    fi

    if [ $input -eq 1 ]; then
        if [ $port -lt 8 ]; then
            # read state of input ports 0-7 from reg 0x0
            x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x00)
            $debug && echo "reg 0x00 = $x"
            val=$(( (1 << port & x) != 0 ))
            $debug && echo "port $port val = $val"
            echo $val
        else
            # read state of input ports 8-15 from reg 0x1
            x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x01)
            $debug && echo "reg 0x01 = $x"
            val=$(( (1 << (port - 8) & x) != 0 ))
            $debug && echo "port $port val = $val"
            echo $val
        fi
    else
        # port is output
        if [ $port -lt 8 ]; then
            # read state of output ports 0-7 from reg 0x2
            x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x02)
            $debug && echo "reg 0x02 = $x"
            val=$(( (1 << port & x) != 0 ))
            $debug && echo "port $port val = $val"
            echo $val
            # 
        else
            # read state of output ports 8-15 from reg 0x3
            x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x03)
            $debug && echo "reg 0x03 = $x"
            val=$(( (1 << (port - 8) & x) != 0 ))
            $debug && echo "port $port val = $val"
            echo $val
        fi
    fi
else
    # change the pin to output, set its val
    if [ $port -lt 8 ]; then
        # set bits 0-7 of reg 0x06 to low for output on ports 0-7
        x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x06)
        $debug && echo "reg 0x06 = $x"
        cfg=$(( ~(1 << port) & x ))
        $debug && echo "port $port cfg = $cfg"
        if [ $(($cfg != $x)) -eq 1 ]; then
            $debug && echo "writing $cfg to reg 0x06"
            i2cset -f -y pxa_i2c-i2c $i2c 0x06 $cfg
        fi
        # read current output val
        x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x02)
        $debug && echo "reg 0x02 = $x"
        if [ $val -eq 0 ]; then
            nval=$(( ~(1 << port) & x))
        else
            nval=$(( 1 << port | x))
        fi
        if [ $(($nval != $x)) -eq 1 ]; then
            $debug && echo "setting port $port reg 0x02 = $nval"
            i2cset -f -y pxa_i2c-i2c $i2c 0x02 $nval
        fi
    else
        # set bits 0-7 of reg 0x07 to low for output on ports 8-15
        x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x07)
        $debug && echo "reg 0x07 = $x"
        cfg=$(( ~(1 << (port-8)) & x ))
        $debug && echo "port $port cfg = $cfg"
        if [ $(($cfg != $x)) ]; then
            $debug && echo "writing $cfg to reg 0x07"
            i2cset -f -y pxa_i2c-i2c $i2c 0x07 $cfg
        fi
        # read current output val
        x=$(i2cget -f -y pxa_i2c-i2c $i2c 0x03)
        $debug && echo "reg 0x03 = $x"
        if [ $val -eq 0 ]; then
            nval=$(( ~(1 << (port-8)) & x))
        else
            nval=$(( 1 << (port-8) | x))
        fi
        if [ $(($nval != $x)) -eq 1 ]; then
            $debug && echo "setting port $port reg 0x03 = $nval"
            i2cset -f -y pxa_i2c-i2c $i2c 0x03 $nval
        fi
    fi
fi

